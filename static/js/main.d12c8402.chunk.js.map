{"version":3,"sources":["Components/PageHome/styles.ts","Components/TextExplore/styles.ts","Components/TextExplore/index.tsx","Components/PageHome/index.tsx","Components/PageAbout/styles.ts","Components/PageAbout/index.tsx","Components/PageContact/styles.ts","Components/PageContact/index.tsx","MaterialUI/index.ts","AppEntry/styles.ts","Components/SimpleMenuBar/styles.ts","Components/SimpleMenuBar/index.tsx","AppEntry/index.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","container","width","height","name","backgroundColor","padding","glowText","color","fontSize","textShadow","TextExplore","classes","className","PageHome","PageAbout","PageContact","defaultLight","createMuiTheme","palette","type","background","default","primary","main","secondary","error","display","justifyContent","alignItems","marginRight","textDecoration","contrastText","SimpleMenuBar","to","AppEntry","ThemeProvider","CssBaseline","basename","process","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.d12c8402.chunk.js","sourcesContent":["import { makeStyles, Theme } from '@material-ui/core';\n\nexport const useStyles = makeStyles(\n  (theme: Theme) => ({\n    container: {\n      width: '100%',\n      height: '100%'\n    }\n  }),\n  { name: 'page-home' }\n);\n","import { makeStyles, Theme } from '@material-ui/core';\n\nexport const useStyles = makeStyles(\n  (theme: Theme) => ({\n    container: {\n      width: '100%',\n      height: '100%',\n      backgroundColor: 'orange',\n      padding: 30\n    },\n    glowText: {\n      //\n      color: 'white',\n      fontSize: 20,\n      textShadow: 'white 10px 10px 10px'\n    }\n  }),\n  { name: 'app' }\n);\n","import React from 'react';\nimport { useStyles } from './styles';\n\nexport const TextExplore = () => {\n  const classes = useStyles();\n  return (\n    <div className={classes.container}>\n      <span className={classes.glowText}>This is some text</span>\n    </div>\n  );\n};\n","import React from 'react';\nimport { useStyles } from './styles';\nimport { TextExplore } from '../TextExplore';\n\nexport const PageHome = () => {\n  const classes = useStyles();\n  return (\n    <div className={classes.container}>\n      <h1>Home Page</h1>\n      <p>This is my home page!</p>\n\n      <TextExplore />\n    </div>\n  );\n};\n","import { makeStyles, Theme } from '@material-ui/core';\n\nexport const useStyles = makeStyles(\n  (theme: Theme) => ({\n    container: {\n      width: '100%',\n      height: '100%'\n    }\n  }),\n  { name: 'page-about' }\n);\n","import React from 'react';\nimport { useStyles } from './styles';\n\nexport const PageAbout = () => {\n  const classes = useStyles();\n  return (\n    <div className={classes.container}>\n      <h1>About Page</h1>\n      <p>This is my about page!</p>\n    </div>\n  );\n};\n","import { makeStyles, Theme } from '@material-ui/core';\n\nexport const useStyles = makeStyles(\n  (theme: Theme) => ({\n    container: {\n      width: '100%',\n      height: '100%'\n    }\n  }),\n  { name: 'page-contact' }\n);\n","import React from 'react';\nimport { useStyles } from './styles';\n\nexport const PageContact = () => {\n  const classes = useStyles();\n  return (\n    <div className={classes.container}>\n      <h1>Contact Page</h1>\n      <p>This is my contact page!</p>\n    </div>\n  );\n};\n","import { createMuiTheme } from '@material-ui/core/styles';\n\nimport { red } from '@material-ui/core/colors';\nimport { pink } from '@material-ui/core/colors';\nimport { indigo } from '@material-ui/core/colors';\n\n// Themes derived from https://bootswatch.com/\n\nexport const defaultDark = createMuiTheme({\n  palette: {\n    type: 'dark',\n    background: { default: 'black' }\n  }\n});\n\nexport const defaultLight = createMuiTheme({\n  palette: {\n    type: 'light'\n  }\n});\n\nexport const darklyTheme = createMuiTheme({\n  palette: {\n    type: 'dark',\n    primary: { main: '#375a7f' },\n    secondary: { main: '#444' },\n    error: { main: '#E74C3C' },\n    background: { default: 'black' }\n  }\n});\n\nexport const superheroTheme = createMuiTheme({\n  palette: {\n    type: 'dark',\n    primary: { main: '#DF691A' },\n    secondary: { main: '#4E5D6C' },\n    error: { main: '#d9534f' },\n    background: { default: '#2B3E50' }\n  }\n});\n\nexport const theme = defaultLight; //darklyTheme;\n// export const theme = darklyTheme;\n\nexport default theme;\n\n// primary?: PaletteColorOptions;\n// secondary?: PaletteColorOptions;\n// error?: PaletteColorOptions;\n// type?: PaletteType;\n// tonalOffset?: number;\n// contrastThreshold?: number;\n// common?: Partial<CommonColors>;\n// grey?: ColorPartial;\n// text?: Partial<TypeText>;\n// divider?: string;\n// action?: Partial<TypeAction>;\n// background?: Partial<TypeBackground>;\n// getContrastText?: (background: string) => string;\n","import { makeStyles, Theme } from '@material-ui/core';\n\nexport const useStyles = makeStyles(\n  (theme: Theme) => ({\n    container: {\n      width: '100%',\n      height: '100%'\n    }\n  }),\n  { name: 'app' }\n);\n","import { makeStyles, Theme } from '@material-ui/core';\n\nexport const useStyles = makeStyles(\n  (theme: Theme) => ({\n    container: {\n      width: '100%',\n      height: 60,\n      backgroundColor: theme.palette.primary.main,\n      display: 'flex',\n      justifyContent: 'flex-start',\n      alignItems: 'center',\n      '& > ul': {\n        '& > li': {\n          display: 'inline-block',\n          marginRight: 10,\n          '& > a ': {\n            textDecoration: 'none',\n            color: theme.palette.primary.contrastText,\n            fontSize: 16\n          }\n        }\n      }\n    }\n  }),\n  { name: 'simple-menu-bar' }\n);\n","import React from 'react';\n\nimport { useStyles } from './styles';\nimport { Link } from 'react-router-dom';\n\nexport const SimpleMenuBar = () => {\n  const classes = useStyles();\n  return (\n    <div className={classes.container}>\n      <ul>\n        <li>\n          <Link to=\"/\">Home</Link>\n        </li>\n        <li>\n          <Link to=\"/about\">About</Link>\n        </li>\n        <li>\n          <Link to=\"/contact\">Contact</Link>\n        </li>\n      </ul>\n    </div>\n  );\n};\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { ThemeProvider, CssBaseline } from '@material-ui/core';\n\nimport { PageHome } from '../Components/PageHome';\nimport { PageAbout } from '../Components/PageAbout';\nimport { PageContact } from '../Components/PageContact';\n\nimport theme from '../MaterialUI';\nimport { useStyles } from './styles';\nimport { SimpleMenuBar } from '../Components/SimpleMenuBar';\n\nexport const AppEntry = () => {\n  const classes = useStyles();\n  return (\n    <div className={classes.container}>\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <Router basename={process.env.REACT_APP_BASE_HREF || '/'}>\n          <SimpleMenuBar />\n          <Switch>\n            <Route exact path=\"/\">\n              <PageHome />\n            </Route>\n            <Route path=\"/about\">\n              <PageAbout />\n            </Route>\n            <Route path=\"/contact\">\n              <PageContact />\n            </Route>\n          </Switch>\n        </Router>\n      </ThemeProvider>\n    </div>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { AppEntry } from './AppEntry';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppEntry />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}